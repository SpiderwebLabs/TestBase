import asyncio
import threading
import rclpy
from rclpy.node import Node
from rclpy.executors import MultiThreadedExecutor
from more_interfaces.srv import Comms
from more_interfaces.msg import Trials1
from mavsdk import System


class DroneController(Node):
    def __init__(self):
        super().__init__('drone_controller')

        # Initialize the drone
        self.drone = System()
        self.telemetry = None
        self.pause_flag = threading.Event()

        # Create a publisher for telemetry data
        self.telemetry_pub = self.create_publisher(Trials1, 'status_update', 10)

        # Create a server to receive actions from the system controller node
        self.action_server = self.create_service(Comms, 'set_comms', self.handle_action)

        self.loop = asyncio.get_event_loop()

        # Connect to the drone
        self.connect_to_drone()

    def connect_to_drone(self):
        self.get_logger().info('Waiting for drone to connect...')

        
        try:
            self.loop.run_until_complete(self._connect_to_drone())
        except Exception as e:
            self.get_logger().error(f"Drone connection failed: {str(e)}")

        self.get_logger().info('Drone connected')

    async def _connect_to_drone(self):
        await self.drone.connect(system_address="udp://:14540")

    async def handle_action(self, request, response):
        self.get_logger().info("set_drone_action")
        self.drone_action = request.message
        self.get_logger().info(self.drone_action)
        self.flight_longitude = request.pos_longitude
        self.flight_latitude = request.pos_latitude
        self.flight_altitude = request.pos_altitude
        self.desired_yaw = request.turn_yaw

        # Pause the telemetry thread
        #self.pause_flag.set()

        if self.drone_action == 'Takeoff':
            self.loop.run_until_complete(self.perform_takeoff())

        response.connect_success = True

        # Resume the telemetry thread
        #self.pause_flag.clear()

        return response

    async def perform_takeoff(self):
        await self.drone.action.arm()
        await self.drone.action.set_takeoff_altitude(10.0)
        await self.drone.action.takeoff()

    def start_telemetry_thread(self):
        #loop = asyncio.get_event_loop()
        telemetry_thread = threading.Thread(target=self.publish_telemetry, args=(self.loop,))
        telemetry_thread.start()

    def publish_telemetry(self, loop):
        asyncio.set_event_loop(loop)

        if self.telemetry is None:
            self.telemetry = self.drone.telemetry

        async def retrieve_telemetry_data():
            while rclpy.ok() and not self.pause_flag.is_set():
                async for battery in self.telemetry.battery():
                    self.get_logger().info(f"Battery: {battery.remaining_percent}")
                    battery_state = battery.remaining_percent
                    break

                async for gps_info in self.drone.telemetry.gps_info():
                    self.get_logger().info(f"GPS info: {gps_info}")
                    gps_info = gps_info.num_satellites
                    break

                async for in_air in self.drone.telemetry.in_air():
                    self.get_logger().info(f"in_air: {in_air}")
                    in_air = in_air
                    break

                async for armed in self.drone.telemetry.armed():
                    self.get_logger().info(f"armed: {armed}")
                    armed = armed
                    break

                # async for land_detected in self.drone.telemetry.landed_state():
                #     landed_status = self.landing_state_check(land_detected)
                #     break

                async for position in self.drone.telemetry.position():
                    self.get_logger().info(f"position_lat: {position.latitude_deg}")
                    self.get_logger().info(f"position_lon: {position.longitude_deg}")
                    self.get_logger().info(f"position_alt: {position.relative_altitude_m}")
                    self.get_logger().info(f"position_alt: {position.absolute_altitude_m}")
                    pos_latitude = position.latitude_deg
                    pos_longitude = position.longitude_deg
                    pos_altitude = position.relative_altitude_m
                    break

                async for velocity in self.drone.telemetry.velocity_ned():
                    self.velocity_x = velocity.north_m_s
                    self.get_logger().info(f"velocity_x: {self.velocity_x}")
                    self.velocity_y = velocity.east_m_s
                    self.get_logger().info(f"velocity_y: {self.velocity_y}")
                    self.velocity_z = velocity.down_m_s
                    self.get_logger().info(f"velocity_z: {self.velocity_z}")
                    break

                async for yaw_info in self.drone.telemetry.attitude_euler():
                    self.get_logger().info(f"yaw_angle: {yaw_info.yaw_deg}")
                    self.current_yaw = yaw_info.yaw_deg
                    break

                # async for flight_info in self.drone.telemetry.flight_mode():
                #     self.get_logger().info(f"flight_mode: {flight_info}")

                self.get_logger().info(
                    f"mission_finished: {await self.drone.mission.is_mission_finished()}")

                

                msg = Trials1()
                msg.battery_percentage = battery_state
                msg.gps_satellites =  gps_info
                msg.pos_altitude = pos_altitude
                msg.pos_latitude = pos_latitude
                msg.pos_longitude = pos_longitude
                self.telemetry_pub.publish(msg)

                await asyncio.sleep(0.3)  # Delay for 1 second

        self.loop.run_until_complete(retrieve_telemetry_data())
        self.loop.close()

    def run(self):
        executor = MultiThreadedExecutor()
        executor.add_node(self)
        executor.spin()

    def shutdown(self):
        self.destroy_node()
        rclpy.shutdown()


def main(args=None):
    rclpy.init(args=args)
    drone_controller = DroneController()
    drone_controller.start_telemetry_thread()
    drone_controller.run()
    drone_controller.shutdown()


if __name__ == '__main__':
    main()
